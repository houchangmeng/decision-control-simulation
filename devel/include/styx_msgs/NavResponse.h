// Generated by gencpp from file styx_msgs/NavResponse.msg
// DO NOT EDIT!


#ifndef STYX_MSGS_MESSAGE_NAVRESPONSE_H
#define STYX_MSGS_MESSAGE_NAVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/TwistStamped.h>

namespace styx_msgs
{
template <class ContainerAllocator>
struct NavResponse_
{
  typedef NavResponse_<ContainerAllocator> Type;

  NavResponse_()
    : targetPose()
    , targetTwist()
    , kappa(0.0)  {
    }
  NavResponse_(const ContainerAllocator& _alloc)
    : targetPose(_alloc)
    , targetTwist(_alloc)
    , kappa(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _targetPose_type;
  _targetPose_type targetPose;

   typedef  ::geometry_msgs::TwistStamped_<ContainerAllocator>  _targetTwist_type;
  _targetTwist_type targetTwist;

   typedef float _kappa_type;
  _kappa_type kappa;





  typedef boost::shared_ptr< ::styx_msgs::NavResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::styx_msgs::NavResponse_<ContainerAllocator> const> ConstPtr;

}; // struct NavResponse_

typedef ::styx_msgs::NavResponse_<std::allocator<void> > NavResponse;

typedef boost::shared_ptr< ::styx_msgs::NavResponse > NavResponsePtr;
typedef boost::shared_ptr< ::styx_msgs::NavResponse const> NavResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::styx_msgs::NavResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::styx_msgs::NavResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::styx_msgs::NavResponse_<ContainerAllocator1> & lhs, const ::styx_msgs::NavResponse_<ContainerAllocator2> & rhs)
{
  return lhs.targetPose == rhs.targetPose &&
    lhs.targetTwist == rhs.targetTwist &&
    lhs.kappa == rhs.kappa;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::styx_msgs::NavResponse_<ContainerAllocator1> & lhs, const ::styx_msgs::NavResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace styx_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::styx_msgs::NavResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::styx_msgs::NavResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::styx_msgs::NavResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::styx_msgs::NavResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::styx_msgs::NavResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::styx_msgs::NavResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::styx_msgs::NavResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "724eadc8f87261a62f785aa244ebcc1d";
  }

  static const char* value(const ::styx_msgs::NavResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x724eadc8f87261a6ULL;
  static const uint64_t static_value2 = 0x2f785aa244ebcc1dULL;
};

template<class ContainerAllocator>
struct DataType< ::styx_msgs::NavResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "styx_msgs/NavResponse";
  }

  static const char* value(const ::styx_msgs::NavResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::styx_msgs::NavResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Server\n"
"geometry_msgs/PoseStamped targetPose\n"
"geometry_msgs/TwistStamped targetTwist\n"
"float32 kappa\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::styx_msgs::NavResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::styx_msgs::NavResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.targetPose);
      stream.next(m.targetTwist);
      stream.next(m.kappa);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::styx_msgs::NavResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::styx_msgs::NavResponse_<ContainerAllocator>& v)
  {
    s << indent << "targetPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.targetPose);
    s << indent << "targetTwist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.targetTwist);
    s << indent << "kappa: ";
    Printer<float>::stream(s, indent + "  ", v.kappa);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STYX_MSGS_MESSAGE_NAVRESPONSE_H
